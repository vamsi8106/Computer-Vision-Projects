# -*- coding: utf-8 -*-
"""M22RM002_Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16fHK2f8kzJU_V-pOv0T1Q7RXp0KVYI9c
"""

import cv2
import numpy
import math
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import cv2
from skimage import io
import matplotlib.pyplot as plt
# %matplotlib inline

Figsize = (10,10)
Image_path = 'line_1.jpg'
Threshold_binarization = 205
Canny_threshold_lower = 150
Canny_threshold_upper = 200
Hough_theta_step = np.pi / 180
Hough_rho_step = 1
Hough_threshold = 30

def threshold(img, level, upper_bound):
    bin_img = img.copy()
    h,w = bin_img.shape
    for i in range(h):
        for j in range(w):
            bin_img[i,j] = 0 if img[i,j] < level else upper_bound
    return bin_img

def canny_edges(img):
    ret_cv,bin_img_cv = cv2.threshold(img, Threshold_binarization, 255, cv2.THRESH_BINARY)
    PIXEL_MAX=255
    bin_img = threshold(img, Threshold_binarization, PIXEL_MAX)
    edges = cv2.Canny(bin_img, Canny_threshold_lower, Canny_threshold_upper)
    return edges

from skimage.feature import peak_local_max
from pylab import *

def get_lines(acc, thetas, rhos, threshold, min_distance):
    acc = np.where(acc>=threshold, acc, 0)
    lines_idx = peak_local_max(acc, min_distance=min_distance)
    sorted_idx = sorted(lines_idx, key=lambda x: acc[x[0]][x[1]], reverse=True)
    lines = []
    for ri,ti in sorted_idx:
        t = thetas[ti]
        r = rhos[ri]
        lines.append((t,r))
    return lines, sorted_idx


def hough_line(img, threshold, min_distance=20, theha_step=np.pi/180, rho_step=1, draw=False):
    theha_step_deg = np.rad2deg(theha_step)
    thetas = np.deg2rad(np.arange(-90.0, 90.0, step=theha_step_deg))
    width, height = img.shape
    max_r = int(np.ceil(np.sqrt(width * width + height * height)))   # max_dist
    rhos = np.arange(-max_r, max_r + 1, step=rho_step)

    acc = np.zeros((len(rhos), len(thetas)), dtype=np.uint8)
    y_idxs, x_idxs = np.nonzero(img)  # (row, col) indexes to edges
    count=0
    for i in range(len(x_idxs)):
        x = x_idxs[i]
        y = y_idxs[i]
        count=count+1
        for t_idx in range(len(thetas)):
            # Calculate rho. diag_len is added for a positive index
            t = thetas[t_idx]
            rho = int(round(x * np.cos(t) + y * np.sin(t))) + max_r
            acc[rho, t_idx] += 1

    lines,idx = get_lines(acc, thetas, rhos, threshold,min_distance)
    if draw:
        x,y = [t for r,t in idx], [r for r,t in idx]
        f, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(8,15))
        ax1.imshow(acc)
        ax2.imshow(acc)
        ax2.plot(x,y, 'ro')
        ax2.autoscale(False)
        
    return lines
import time
start_time = time.time()
img1=cv2.imread("/content/drive/MyDrive/line_2.jpg")
img=cv2.imread("/content/drive/MyDrive/line_2.jpg",0)
edges= canny_edges(img)
lines = hough_line(edges, threshold=Hough_threshold, theha_step=Hough_theta_step,
                   rho_step=Hough_rho_step, min_distance=20, draw=True)
end_time = time.time()
execution_time = end_time - start_time
print("Execution time:", execution_time, "seconds")
print("Number of lines detected are :",count)

cv2_imshow(img1)

def plot_lines(img, lines, N=0):
    if lines is None: return
    dst = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
    size = len(lines) if N == 0 else min(N, len(lines))
    for i in range(size):
        rho = lines[i][1]
        theta = lines[i][0]
            
        a = np.cos(theta)
        b = np.sin(theta)
        x0 = a * rho
        y0 = b * rho
        pt1 = (int(x0 + 1000*(-b)), int(y0 + 1000*(a)))
        pt2 = (int(x0 - 1000*(-b)), int(y0 - 1000*(a)))
            
        cv2.line(dst, pt1, pt2, (255,255,0), 2, cv2.LINE_AA)
        plt.imshow(dst)
        
dst=plot_lines(edges, lines)

"""Using Inbuilt Function"""

import time
start_time = time.time()
import cv2
import numpy as np
img=cv2.imread("/content/drive/MyDrive/line_2.jpg")
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
edges = cv2.Canny(gray, 50, 150, apertureSize=3)
lines = cv2.HoughLinesP(edges, 1, np.pi/180, 100, minLineLength=100, maxLineGap=10)
count=0
for line in lines:
    count=count+1
    x1, y1, x2, y2 = line[0]
    cv2.line(img, (x1, y1), (x2, y2), (0, 2550, 0), 1)

cv2_imshow(img)
end_time = time.time()
execution_time = end_time - start_time
print("Execution time:", execution_time, "seconds")
print("Number of lines detected are :",count)

