# -*- coding: utf-8 -*-
"""M22RM002_Q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GtcQfbjB688uf4EJo5q4nQcJME5QPxoy
"""

import cv2
import numpy
import math
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import cv2
from matplotlib import pyplot as plt

def descriptor(img1,img2):
      
      img1 = cv2.resize(im1,(450,700))
      img2 = cv2.resize(im2,(450,700))

      img1 = cv2.cvtColor(im1, cv2.COLOR_BGR2GRAY)
      img2 = cv2.cvtColor(im2, cv2.COLOR_BGR2GRAY)
      orb = cv2.ORB_create(50)  

      kp1, des1 = orb.detectAndCompute(img1, None)  
      kp2, des2 = orb.detectAndCompute(img2, None)


      matcher = cv2.DescriptorMatcher_create(cv2.DESCRIPTOR_MATCHER_BRUTEFORCE_HAMMING)

      matches = matcher.match(des1, des2, None)  

      matches = sorted(matches, key = lambda x:x.distance)

      img3 = cv2.drawMatches(im1,kp1, im2, kp2, matches[:10], None)

      img3 = cv2.resize(img3,(300,400))
      points1 = np.zeros((len(matches), 2), dtype=np.float32)  
      points2 = np.zeros((len(matches), 2), dtype=np.float32)

      for i, match in enumerate(matches):
          points1[i, :] = kp1[match.queryIdx].pt    
          points2[i, :] = kp2[match.trainIdx].pt  

      return points1,points2,img3

def homography_mask(points1,points2):
      h, mask = cv2.findHomography(points1, points2, cv2.RANSAC)
      height, width, channels = im2.shape
      im1Reg = cv2.warpPerspective(im1, h, (width, height))  #Applies a perspective transformation to an image.  
      im1Reg = cv2.resize(im1Reg,(300,400))
      return im1Reg

def calculate_orb_similarity(image1, image2):
    orb = cv2.ORB_create()
    kp1, des1 = orb.detectAndCompute(image1, None)
    kp2, des2 = orb.detectAndCompute(image2, None)
    bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    matches = bf.match(des1, des2)
    similarity = sum([match.distance for match in matches]) / len(matches)
    return similarity

def fault_perfect(similarity):
    if (similarity>55):
      return 1
    else:
      return 0
def fault_perfect_1(similarity):
    if (similarity>53):
      return 1
    else:
      return 0

def countours(im2,image2):
    im2=cv2.resize(im2,(450,700))
    image2=cv2.resize(image2,(450,700))
    ref_gray = cv2.cvtColor(im2, cv2.COLOR_BGR2GRAY)
    probe_gray = cv2.cvtColor(image2, cv2.COLOR_BGR2GRAY)
    ref_edges = cv2.Canny(ref_gray, 100, 200)
    probe_edges = cv2.Canny(probe_gray, 100, 200)
    diff = cv2.absdiff(probe_edges, ref_edges)
    thresholded = cv2.threshold(diff, 25, 255, cv2.THRESH_BINARY)[1]
    contours, _ = cv2.findContours(thresholded, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    for i in contours:
        if i[0][0][0]>400 and i[0][0][1]>400:
            x,y,w,h = cv2.boundingRect(i)
            cv2.rectangle(image2, (x,y), (x+w,y+h), (255,200,0), 2)
    image2=cv2.resize(image2,(300,400))
    cv2_imshow(image2)

"""EXAMPLE-1

Faulty Image-1
"""

im1 = cv2.imread(r'/content/drive/MyDrive/train/faulty/Element_Optimised_Colour_ShapeLin.png')        
im2 = cv2.imread(r'/content/drive/MyDrive/Reference/Reference/reference.png')

points1,points2,image1=descriptor(im1,im2)
image2=homography_mask(points1,points2)

cv2_imshow(image1)
cv2_imshow(image2)

#orb_sim=orb_sim(im1,im2)
orb_sim=calculate_orb_similarity(im1,image2)
print("similarity between images is :",orb_sim)

x=fault_perfect(orb_sim)
if x==1:
  print("Given part is perfect,therefore no differences")
else:
  print("Given part is fault,the differences are shown in below image")
  countours(im2,image2)

"""Faulty Image-2"""

im1 = cv2.imread(r'/content/drive/MyDrive/train/faulty/MeshFlowLin.png')        
im2 = cv2.imread(r'/content/drive/MyDrive/Reference/Reference/reference.png')

points1,points2,image1=descriptor(im1,im2)
image2=homography_mask(points1,points2)

cv2_imshow(image1)
cv2_imshow(image2)

#orb_sim=orb_sim(im1,im2)
orb_sim=calculate_orb_similarity(im1,image2)
print("similarity between images is :",orb_sim)

x=fault_perfect(orb_sim)
if x==1:
  print("Given part is perfect,therefore no differences")
else:
  print("Given part is fault,the differences are shown in below image")
  countours(im2,image2)

"""Perfect Image-1"""

im1 = cv2.imread(r'/content/drive/MyDrive/train/perfect/penetration_checkLin.png')        
im2 = cv2.imread(r'/content/drive/MyDrive/Reference/Reference/reference.png')

points1,points2,image1=descriptor(im1,im2)
image2=homography_mask(points1,points2)

cv2_imshow(image1)
cv2_imshow(image2)

#orb_sim=orb_sim(im1,im2)
orb_sim=calculate_orb_similarity(im1,image2)
print("similarity between images is :",orb_sim)

x=fault_perfect(orb_sim)
if x==1:
  print("Given part is perfect,therefore no differences")
else:
  print("Given part is fault,the differences are shown in below image")
  countours(im2,image2)

"""Perfect Image-2"""

im1 = cv2.imread(r'/content/drive/MyDrive/train/perfect/penetration_checkLinLow.png')        
im2 = cv2.imread(r'/content/drive/MyDrive/Reference/Reference/reference.png')

points1,points2,image1=descriptor(im1,im2)
image2=homography_mask(points1,points2)

cv2_imshow(image1)
cv2_imshow(image2)

#orb_sim=orb_sim(im1,im2)
orb_sim=calculate_orb_similarity(im1,image2)
print("similarity between images is :",orb_sim)

x=fault_perfect(orb_sim)
if x==1:
  print("Given part is perfect,therefore no differences")
else:
  print("Given part is fault,the differences are shown in below image")
  countours(im2,image2)

"""EXAMPLE-2

Faulty Image-1
"""

im1 = cv2.imread(r'/content/drive/MyDrive/example-2/train/faulty/2ndOrderElements.png')        
im2 = cv2.imread(r'/content/drive/MyDrive/example-2/Orginal.png')

points1,points2,image1=descriptor(im1,im2)
image2=homography_mask(points1,points2)

cv2_imshow(image1)
cv2_imshow(image2)

#orb_sim=orb_sim(im1,im2)
orb_sim=calculate_orb_similarity(im1,image2)
print("similarity between images is :",orb_sim)

x=fault_perfect_1(orb_sim)
if x==1:
  print("Given part is perfect,therefore no differences")
else:
  print("Given part is fault,the differences are shown in below image")
  countours(im2,image2)

"""Faulty Image-2"""

im1 = cv2.imread(r'/content/drive/MyDrive/example-2/train/faulty/Scaled.png')        
im2 = cv2.imread(r'/content/drive/MyDrive/example-2/Orginal.png')

points1,points2,image1=descriptor(im1,im2)
image2=homography_mask(points1,points2)

cv2_imshow(image1)
cv2_imshow(image2)

#orb_sim=orb_sim(im1,im2)
orb_sim=calculate_orb_similarity(im1,image2)
print("similarity between images is :",orb_sim)

x=fault_perfect_1(orb_sim)
if x==1:
  print("Given part is perfect,therefore no differences")
else:
  print("Given part is fault,the differences are shown in below image")
  countours(im2,image2)

"""Perfect Image-1"""

im1 = cv2.imread(r'/content/drive/MyDrive/example-2/train/perfect/Orginal_Lin.png')        
im2 = cv2.imread(r'/content/drive/MyDrive/example-2/Orginal.png')

points1,points2,image1=descriptor(im1,im2)
image2=homography_mask(points1,points2)

cv2_imshow(image1)
cv2_imshow(image2)

#orb_sim=orb_sim(im1,im2)
orb_sim=calculate_orb_similarity(im1,image2)
print("similarity between images is :",orb_sim)

x=fault_perfect_1(orb_sim)
if x==1:
  print("Given part is perfect,therefore no differences")
else:
  print("Given part is fault,the differences are shown in below image")
  countours(im2,image2)

"""Perfect Image-2"""

im1 = cv2.imread(r'/content/drive/MyDrive/example-2/train/perfect/Orginal_Lin_Low.png')        
im2 = cv2.imread(r'/content/drive/MyDrive/example-2/Orginal.png')

points1,points2,image1=descriptor(im1,im2)
image2=homography_mask(points1,points2)

cv2_imshow(image1)
cv2_imshow(image2)

#orb_sim=orb_sim(im1,im2)
orb_sim=calculate_orb_similarity(im1,image2)
print("similarity between images is :",orb_sim)

x=fault_perfect_1(orb_sim)
if x==1:
  print("Given part is perfect,therefore no differences")
else:
  print("Given part is fault,the differences are shown in below image")
  countours(im2,image2)

