# -*- coding: utf-8 -*-
"""M22RM002_Q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jVaxQ_eIr5aTKxdcXh6nG7_DiJUZNi1V
"""

from google.colab import drive
drive.mount('/content/drive')

"""# METHOD 1"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC 
from skimage import exposure, feature
import numpy as np
import cv2 as cv
import glob
import os
from imutils import paths
from google.colab.patches import cv2_imshow

imagepaths=list(paths.list_images(r'/content/drive/MyDrive/logo matching/Ex1/logos'))
testpaths=list(paths.list_images(r'/content/drive/MyDrive/logo matching/Ex1/test'))

hists = [] 
labels = [] 

for imagePath in imagepaths:
    label = imagePath.split("/")[-1]
    label=label[0:len(label)-4]
    
    image = cv.imread(imagePath)
    
    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)

    md = np.median(gray)
    sigma = 0.4
    low = int(max(0, (1.0 - sigma) * md))
    up = int(min(255, (1.0 + sigma) * md))
 
    edged = cv.Canny(gray, low, up)

    (x, y, w, h) = cv.boundingRect(edged) 
    logo = gray[y:y + h, x:x + w]
    logo = cv.resize(logo, (200, 100))

    hist = feature.hog(logo,  orientations=9, pixels_per_cell=(10, 10),cells_per_block=(2, 2),transform_sqrt=True,block_norm="L1")
    hists.append(hist)
    labels.append(label)
   
model = SVC(kernel='linear')
model.fit(hists, labels)

for (imagePath) in testpaths:
    image = cv.imread(imagePath)

    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)
    logo = cv.resize(gray, (200, 100))

    hist =  feature.hog( logo, orientations=9,  pixels_per_cell=(10, 10),cells_per_block=(2, 2), transform_sqrt=True,  block_norm="L1")
             
    predict = model.predict(hist.reshape(1, -1))[0]

    height, width = image.shape[:2]
    reWidth = int((300/height)*width)
    image = cv.resize(image, (reWidth, 300))
    cv.putText(image, predict.title(), (10, 30), cv.FONT_HERSHEY_TRIPLEX, 1.2, (0 ,255, 0), 1)

    imageName = imagePath.split("/")[-1]
    cv2_imshow(image)

imagepaths=list(paths.list_images(r'/content/drive/MyDrive/logo matching/Ex2/logos'))
testpaths=list(paths.list_images(r'/content/drive/MyDrive/logo matching/Ex2/test'))

hists = [] # histogram of Image
labels = [] # Label of Image

for imagePath in imagepaths:
    label = imagePath.split("/")[-1]
    label=label[0:len(label)-4]
    
    image = cv.imread(imagePath)
    
    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)

    md = np.median(gray)
    sigma = 0.4
    low = int(max(0, (1.0 - sigma) * md))
    up = int(min(255, (1.0 + sigma) * md))
 
    edged = cv.Canny(gray, low, up)

    (x, y, w, h) = cv.boundingRect(edged) 
    logo = gray[y:y + h, x:x + w]
    logo = cv.resize(logo, (200, 100))

    hist = feature.hog(logo,  orientations=9, pixels_per_cell=(10, 10),cells_per_block=(2, 2),transform_sqrt=True,block_norm="L1")
    hists.append(hist)
    labels.append(label)
   
model = SVC(kernel='linear')
model.fit(hists, labels)

for (imagePath) in testpaths:
    image = cv.imread(imagePath)

    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)
    logo = cv.resize(gray, (200, 100))

    hist =  feature.hog( logo, orientations=9,  pixels_per_cell=(10, 10),cells_per_block=(2, 2), transform_sqrt=True,  block_norm="L1")
             
    predict = model.predict(hist.reshape(1, -1))[0]

    height, width = image.shape[:2]
    reWidth = int((300/height)*width)
    image = cv.resize(image, (reWidth, 300))
    cv.putText(image, predict.title(), (10, 30), cv.FONT_HERSHEY_TRIPLEX, 1.2, (0 ,255, 0), 1)

    imageName = imagePath.split("/")[-1]
    cv2_imshow(image)

"""# METHOD 2

"""

import matplotlib.pyplot as plt
import numpy as np
import PIL
import tensorflow as tf
import random
import os

from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential
from google.colab.patches import cv2_imshow

# Commented out IPython magic to ensure Python compatibility.
import cv2
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import seaborn as sns
from keras.preprocessing.image import ImageDataGenerator
# %matplotlib inline
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout

def data_generator(TrainingImagePath):
      train_datagen = ImageDataGenerator(
          rescale=1./255,
          rotation_range=20,
          width_shift_range=0.2,
          height_shift_range=0.2,
          shear_range=0.2,
          zoom_range=0.2,
          horizontal_flip=True,
          fill_mode='nearest'
          )

      test_datagen=ImageDataGenerator(rescale=1./255)
      training_set=train_datagen.flow_from_directory(
      TrainingImagePath,
      target_size=(128,128),
      batch_size=10,
      class_mode='categorical')
def train_model():
    classifier=Sequential()
    classifier.add(Conv2D(32,kernel_size=(3,3),strides=(1,1), input_shape=(128,128,3),activation='relu'))
    classifier.add(MaxPooling2D(pool_size=(2,2)))
    classifier.add(Conv2D(64,kernel_size=(3,3),strides=(1,1),activation='relu'))
    classifier.add(MaxPooling2D(pool_size=(2,2)))
    classifier.add(Dropout(0.2))
    classifier.add(Flatten())
    classifier.add(Dense(256, activation='relu'))
    classifier.add(Dense(10, activation='softmax'))
    classifier.compile(optimizer='rmsprop',
              loss='categorical_crossentropy',
              metrics=['accuracy'])
    model_history = classifier.fit_generator(
    training_set,
    epochs=25,
    verbose=1)

TrainingImagePath='/content/drive/MyDrive/ASS_2_Q_1_LOGOS/Ex2/logos'
TestingImagePath='/content/drive/MyDrive/ASS_2_Q_1_LOGOS/Ex2/test'
data_generator(TrainingImagePath)
train_model()

from tensorflow.keras.utils import load_img,img_to_array
from keras.utils.image_utils import img_to_array

test_Image="/content/drive/MyDrive/ASS_2_Q_1_LOGOS/Ex1/test/levis/levis.jpg"

test_image=load_img(test_Image,target_size=(128,128))
test_img=img_to_array(test_image)
test_image=np.expand_dims(test_image,axis=0)
result=classifier.predict(test_image,verbose=0)

image=cv2.imread("/content/drive/MyDrive/ASS_2_Q_1_LOGOS/Ex1/test/levis/levis.jpg")
image=cv2.resize(image,(400,300))
cv2_imshow(image)

classes1=['hp','kfc','levis','lg','nescafe','shell','spar','tacobell','tommyhilfiger','umbro']
print(f'The detcted company is : {classes1[np.argmax(result)]}')

TrainingImagePath='/content/drive/MyDrive/ASS_2_Q_1_LOGOS/Ex2/logos'
TestingImagePath='/content/drive/MyDrive/ASS_2_Q_1_LOGOS/Ex2/test'
data_generator(TrainingImagePath)
train_model()

from tensorflow.keras.utils import load_img,img_to_array

test_Image="/content/drive/MyDrive/ASS_2_Q_1_LOGOS/Ex2/test/starbucks/starbucks.jpeg"
from keras.utils.image_utils import img_to_array
test_image=load_img(test_Image,target_size=(128,128))
test_img=img_to_array(test_image)
test_image=np.expand_dims(test_image,axis=0)
result=classifier.predict(test_image,verbose=0)

image=cv2.imread("/content/drive/MyDrive/ASS_2_Q_1_LOGOS/Ex2/test/starbucks/starbucks.jpeg")
image=cv2.resize(image,(400,300))
cv2_imshow(image)

classes1=['honda','hp','lg','motorola','pepsi','puma','rolex','starbucks','toyota','warnerbros']
print(f'The detcted company is : {classes1[np.argmax(result)]}')

"""## METHOD 3"""

def sift_homography(imagepaths,path1):
    x=[]
    for path in imagepaths:
        img1 = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
        img2 = cv2.imread(path1, cv2.IMREAD_GRAYSCALE)

        # Create a SIFT object and detect keypoints and descriptors in both images
        sift = cv2.xfeatures2d.SIFT_create()
        kp1, desc1 = sift.detectAndCompute(img1, None)
        kp2, desc2 = sift.detectAndCompute(img2, None)

        # Match the SIFT features between the two images using the FLANN matcher
        matcher = cv2.FlannBasedMatcher()
        matches = matcher.match(desc1, desc2)

        # Compute the similarity score based on the number of inliers in a homography transformation
        MIN_MATCH_COUNT = 10
        if len(matches) > MIN_MATCH_COUNT:
            src_pts = [kp1[match.queryIdx].pt for match in matches]
            dst_pts = [kp2[match.trainIdx].pt for match in matches]
            H, mask = cv2.findHomography(np.float32(src_pts), np.float32(dst_pts), cv2.RANSAC, 5.0)
            inlier_ratio = float(mask.sum()) / mask.size
            #print("Similarity score: ", inlier_ratio)
            x.append(inlier_ratio)
    return x

from tensorflow.python.ops.math_ops import Xlog1py
from imutils import paths
x1=[]
imagepaths=list(paths.list_images(r'/content/drive/MyDrive/logo matching/Ex1/logos'))
path1="/content/drive/MyDrive/logo matching/Ex1/test/levis.jpg"
x=sift_homography(imagepaths,path1)
x=x[::-1]
image=cv2.imread(path1)
image=cv2.resize(image,(400,300))
cv2_imshow(image)

l=['hp','kfc','levis','lg','nescafe','shell','spar','tacobell','tommyhilfiger','umbro']
for i in x:
  y=i*10
  x1.append(round(y))
max_value = (max(x1))
index = x1.index(max_value)
print(f'Detected logo is {l[index]}')

from tensorflow.python.ops.math_ops import Xlog1py
from imutils import paths
x1=[]
imagepaths=list(paths.list_images(r'/content/drive/MyDrive/logo matching/Ex2/logos'))
path1="/content/drive/MyDrive/logo matching/Ex2/test/starbucks.jpeg"
x=sift_homography(imagepaths,path1)
image=cv2.imread(path1)
image=cv2.resize(image,(400,300))
cv2_imshow(image)

l=['starbucks','toyota','warnerbros','rolex','pepsi','puma','lg','hp','motorola','honda']
for i in x:
  y=i*10
  x1.append(round(y))
max_value = (max(x1))
index = x1.index(max_value)
print(f'Detected logo is {l[index]}')

